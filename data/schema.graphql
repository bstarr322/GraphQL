type Business implements Node {
  # The ID of an object
  id: ID!
  name: String
  image: String
}

# A connection to a list of items.
type BusinessConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [BusinessEdge]
}

# An edge in a connection.
type BusinessEdge {
  # The item at the end of the edge
  node: Business

  # A cursor for use in pagination
  cursor: String!
}

type Collection implements Node {
  # The ID of an object
  id: ID!
  title: String
  parentNodeId: String
  childrenNodesCount: Int
  image: String
  childrenNodes: [Collection]
}

# A connection to a list of items.
type CollectionConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CollectionEdge]
}

# An edge in a connection.
type CollectionEdge {
  # The item at the end of the edge
  node: Collection

  # A cursor for use in pagination
  cursor: String!
}

type Content implements Node {
  # The ID of an object
  id: ID!
  name: String
  type: String
  typeId: String
}

# A connection to a list of items.
type ContentConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ContentEdge]
}

# An edge in a connection.
type ContentEdge {
  # The item at the end of the edge
  node: Content

  # A cursor for use in pagination
  cursor: String!
}

input ContentInput {
  contentId: String
}

input CreateGoalInput {
  input: GoalInput
  goalType: String
  clientMutationId: String
}

type CreateGoalPayload {
  result: String
  clientMutationId: String
}

input DeleteGoalInput {
  input: Int
  clientMutationId: String
}

type DeleteGoalPayload {
  output: String
  clientMutationId: String
}

input GoalInput {
  name: String
  goalType: GoalTypeInput
  description: String
  businessId: String
  isBusinessCritical: Boolean
  isSequential: Boolean
  startDate: String
  tasks: [TaskInput]
  teams: [TeamInput]
}

type GoalType implements Node {
  # The ID of an object
  id: ID!
  name: String
  iconReference: String
  tag: String
}

# A connection to a list of items.
type GoalTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [GoalTypeEdge]
}

# An edge in a connection.
type GoalTypeEdge {
  # The item at the end of the edge
  node: GoalType

  # A cursor for use in pagination
  cursor: String!
}

input GoalTypeInput {
  id: Int
}

type Mutation {
  createGoal(input: CreateGoalInput!): CreateGoalPayload
  updateGoal(input: UpdateGoalInput!): UpdateGoalPayload
  deleteGoal(input: DeleteGoalInput!): DeleteGoalPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  viewer(viewerId: Int): Viewer
}

input TaskInput {
  taskType: TaskTypeInput
  instruction: String
  order: Int
  daysToComplete: Int
  content: ContentInput
}

type TaskType implements Node {
  # The ID of an object
  id: ID!
  name: String
  tag: String
}

# A connection to a list of items.
type TaskTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TaskTypeEdge]
}

# An edge in a connection.
type TaskTypeEdge {
  # The item at the end of the edge
  node: TaskType

  # A cursor for use in pagination
  cursor: String!
}

input TaskTypeInput {
  id: Int
}

type Team implements Node {
  # The ID of an object
  id: ID!
  title: String
  parentNodeId: String
  childrenNodes: [Team]
}

# A connection to a list of items.
type TeamConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TeamEdge]
}

# An edge in a connection.
type TeamEdge {
  # The item at the end of the edge
  node: Team

  # A cursor for use in pagination
  cursor: String!
}

input TeamInput {
  id: String
  users: [User]
}

input UpdateGoalInput {
  input: GoalInput
  id: Int
  clientMutationId: String
}

type UpdateGoalPayload {
  # The ID of an object
  id: ID!
  name: String
  description: String
  businessId: String
  isBusinessCritical: Boolean
  isSequential: Boolean
  startDate: String
  clientMutationId: String
}

input User {
  id: String
}

# Logged In User
type Viewer {
  viewerId: String
  name: String
  goalTypesConn(after: String, first: Int, before: String, last: Int): GoalTypeConnection
  goalType(goalTypeId: Int): GoalType
  goalTypeByTag(tag: String): GoalType
  taskTypesConn(after: String, first: Int, before: String, last: Int): TaskTypeConnection
  taskType(taskTypeId: Int): TaskType
  taskTypeByTag(tag: String): TaskType
  teamsConn(businessId: String, after: String, first: Int, before: String, last: Int): TeamConnection
  contentsConn(businessId: String, after: String, first: Int, before: String, last: Int): ContentConnection
  collectionsConn(businessId: String, after: String, first: Int, before: String, last: Int): CollectionConnection
  businessesConn(after: String, first: Int, before: String, last: Int): BusinessConnection
}
