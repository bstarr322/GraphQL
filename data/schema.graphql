type Activity {
  activityId: ID
  taskType: TaskType
  datePerformed: String
  title: String
  description: String
  cpdCategory: String
  contentId: String
  points: Int
}

input ActivityContentInput {
  userId: String
  contentId: String
  isComplete: Boolean
  membershipPoints: [MembershipInput]
}

type Business {
  businessId: ID
  name: String
  image: String
}

input CollectionInput {
  collectionId: String
  contents: [ContentInput]
}

input CompleteActivitiesInput {
  activity: [CompleteActivityInput]
  clientMutationId: String
}

type CompleteActivitiesPayload {
  clientMutationId: String
}

input CompleteActivityInput {
  taskId: String
  user: UserInput
  taskType: TaskTypeInput
  datePerformed: String
  data: String
}

type ContentId {
  Id: String
}

input ContentInput {
  contentId: String
}

type CpdAvailableYears {
  year: Int
  from: String
  to: String
}

type CpdGoalSummary {
  cpdGoalSummaryId: ID
  extensionId: String
  membership: Membership
  summary: [CpdSummary]
}

type CpdGoalUser {
  cpdGoalUserId: ID
  goalId: String
  goalCpdPersonalId: String
  goalCpdOrgAdminId: String
  membershipId: String
  dateJoined: String
  pointsCompleted: Int
  pointsToComplete: Int
  dateRange: CpdAvailableYears
  activities: [Activity]
}

type CpdGoalUsers {
  cpdGoalUsersId: ID
  goalId: String
  user: GoalServiceUser
  startDate: String
  anniversaryDate: String
  timeRemaining: Int
  pointsCompleted: Int
  percentage: Int
}

type CpdSummary {
  monthsRemaining: Int
  numberOfUsers: Int
}

input CreateGoalInput {
  goal: GoalInput
  clientMutationId: String
}

type CreateGoalPayload {
  goalId: String
  viewer: Viewer
  errorMessage: String
  clientMutationId: String
}

input DeleteGoalInput {
  goalId: String
  clientMutationId: String
}

type DeleteGoalPayload {
  viewer: Viewer
  clientMutationId: String
}

type Goal {
  goalId: ID
  extensionId: String
  name: String
  goalType: GoalType
  description: String
  business: Business
  teams: [GoalServiceTeam]
  startDate: String
  isBusinessCritical: Boolean
  isSequential: Boolean
  endDate: String
  numberOfTasks: Int
  progress: Int
  tasks: [Task]
}

# A connection to a list of items.
type GoalConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [GoalEdge]
}

# An edge in a connection.
type GoalEdge {
  # The item at the end of the edge
  node: Goal

  # A cursor for use in pagination
  cursor: String!
}

input GoalInput {
  name: String
  goalType: GoalTypeInput
  description: String
  businessId: String
  isBusinessCritical: Boolean
  isSequential: Boolean
  startDate: String
  endDate: String
  tasks: [TaskInput]
  teams: [TeamInput]
  industryId: String
  membershipId: String
  pointsToComplete: Int
}

type GoalServiceCollection {
  collectionId: ID
  contents: [GoalServiceContent]
}

type GoalServiceContent {
  contentId: ID
  progress: String
}

type GoalServiceTeam {
  teamId: ID
  name: String
}

type GoalServiceUser {
  userId: ID
  name: String
}

type GoalType {
  goalTypeId: ID
  name: String
  tag: String
}

input GoalTypeInput {
  id: Int
}

type GoalUser {
  goalUserId: ID
  extensionId: String
  goalId: String
  user: GoalServiceUser
  userId: String
  goalInfo: Goal
  teams: [GoalServiceTeam]
  progress: Int
  lastUpdate: String
  tasks: [Task]
}

type Industry {
  industryId: ID
  name: String
}

type LegacyCollectionTree {
  collectionId: ID
  title: String
  parentNodeId: String
  contentCount: Int
  image: String
  childrenNodes: [LegacyCollectionTree]
  progress: String
}

type LegacyContent {
  contentId: ID
  name: String
  type: String
  typeId: String
  image: String
  purchased: String
  duration: String
  presenter: String
  datePublished: String
  contentRating: String
}

type LegacyUser {
  userId: String
  firstName: String
  lastName: String
  fullName: String
  state: String
  city: String
}

type Membership {
  membershipId: ID
  name: String
  cpdPoints: Int
}

input MembershipInput {
  membershipId: String
  points: Int
}

type Mutation {
  createGoal(input: CreateGoalInput!): CreateGoalPayload
  deleteGoal(input: DeleteGoalInput!): DeleteGoalPayload
  completeActivities(input: CompleteActivitiesInput!): CompleteActivitiesPayload
  updateActivityContent(input: UpdateActivityContentInput!): UpdateActivityContentPayload
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  viewer(viewerId: Int): Viewer
}

type Task {
  taskId: ID
  userTaskId: String
  userId: String
  taskType: TaskType
  instruction: String
  order: Int
  daysToComplete: Int
  endDate: String
  data: String
  content: GoalServiceContent
  collection: GoalServiceCollection
  isCompleted: Boolean
}

input TaskInput {
  taskType: TaskTypeInput
  instruction: String
  order: Int
  daysToComplete: Int
  content: ContentInput
  collection: CollectionInput
}

type TaskType {
  taskTypeId: ID
  name: String
  tag: String
}

input TaskTypeInput {
  id: Int
}

input TeamInput {
  id: String
  name: String
}

type TeamTree {
  teamTreeId: ID
  title: String
  parentNodeId: String
  childrenNodes: [TeamTree]
  userCount: Int
}

input UpdateActivityContentInput {
  activityContent: ActivityContentInput
  clientMutationId: String
}

type UpdateActivityContentPayload {
  clientMutationId: String
}

input UserInput {
  userId: String
  fullName: String
}

# Logged In User, root for all queries available to viewer/user
type Viewer {
  viewerId: String
  name: String
  goalConnection(businessId: String, page: Int, size: Int, after: String, first: Int, before: String, last: Int): GoalConnection
  goal(goalId: String): Goal
  goalTypes: [GoalType]
  goalType(goalTypeId: Int): GoalType
  goalTypeByTag(tag: String): GoalType
  taskTypes: [TaskType]
  taskType(taskTypeId: Int): TaskType
  taskTypeByTag(tag: String): TaskType
  goalUsers(goalId: String): [GoalUser]
  goalUser(goalId: String, userId: String): GoalUser
  myGoals(businessId: String, userId: String, page: Int, size: Int): [Goal]
  cpdAvailableYears(goalId: String, userId: String): [CpdAvailableYears]
  cpdGoalSummary(goalId: String): CpdGoalSummary
  cpdGoalUsers(goalId: String, page: Int, size: Int, month: Int): [CpdGoalUsers]
  cpdGoalUser(goalId: String, userId: String, year: Int): CpdGoalUser
  userByBusinessAndTeam(businessId: String, teamId: String): [LegacyUser]
  contentsByBusinessId(businessId: String): [LegacyContent]
  contentIdsByBusinessIdAndCollectionId(businessId: String, collectionId: String): [ContentId]
  contentSummaryByBusinessAndContentId(businessId: String, contentIds: [String]): [LegacyContent]
  collectionsByBusinessId(businessId: String): [LegacyCollectionTree]
  businesses: [Business]
  industriesByBusinessId(businessId: String): [Industry]
  membershipsByBusinessAndIndustry(businessId: String, industryId: String): [Membership]
  teamsByBusinessId(businessId: String): TeamTree
  teamInformationByTeamIdAndBusinessId(teamId: String, businessId: String): TeamTree
}
